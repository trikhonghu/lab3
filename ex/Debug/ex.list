
ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080031d8  080031d8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d8  080031d8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080031e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000030  08003210  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003210  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3a6  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcd  00000000  00000000  0002a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017953  00000000  00000000  0002d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17b  00000000  00000000  00044c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085dc5  00000000  00000000  00050dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002874  00000000  00000000  000d6bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	0800319c 	.word	0x0800319c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	0800319c 	.word	0x0800319c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <subKeyProcess>:
uint8_t keyReg2[3] = {NORMAL_STATE};

uint8_t keyReg3[3] = {NORMAL_STATE};
uint8_t timerForKeyPress = 200;

void subKeyProcess(uint8_t index){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	//TO DO
	button_flag[index] = 1;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <subKeyProcess+0x1c>)
 800077a:	2101      	movs	r1, #1
 800077c:	54d1      	strb	r1, [r2, r3]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	2000004c 	.word	0x2000004c

0800078c <getKeyInput>:

void getKeyInput(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e06c      	b.n	8000872 <getKeyInput+0xe6>
		keyReg0[i] = keyReg1[i];
 8000798:	4a3a      	ldr	r2, [pc, #232]	; (8000884 <getKeyInput+0xf8>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	7819      	ldrb	r1, [r3, #0]
 80007a0:	4a39      	ldr	r2, [pc, #228]	; (8000888 <getKeyInput+0xfc>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
		keyReg1[i] = keyReg2[i];
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <getKeyInput+0x100>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	7819      	ldrb	r1, [r3, #0]
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <getKeyInput+0xf8>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	460a      	mov	r2, r1
 80007ba:	701a      	strb	r2, [r3, #0]
		keyReg2[i] = HAL_GPIO_ReadPin(GPIOB, buttonArray[i]);
 80007bc:	4a34      	ldr	r2, [pc, #208]	; (8000890 <getKeyInput+0x104>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4833      	ldr	r0, [pc, #204]	; (8000894 <getKeyInput+0x108>)
 80007c8:	f001 fcb0 	bl	800212c <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a2e      	ldr	r2, [pc, #184]	; (800088c <getKeyInput+0x100>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
		if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])){
 80007da:	4a2b      	ldr	r2, [pc, #172]	; (8000888 <getKeyInput+0xfc>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4928      	ldr	r1, [pc, #160]	; (8000884 <getKeyInput+0xf8>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d13e      	bne.n	800086c <getKeyInput+0xe0>
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <getKeyInput+0xf8>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	4925      	ldr	r1, [pc, #148]	; (800088c <getKeyInput+0x100>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	440b      	add	r3, r1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d134      	bne.n	800086c <getKeyInput+0xe0>
			if(keyReg3[i] != keyReg2[i]){//normal press
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <getKeyInput+0x10c>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	4920      	ldr	r1, [pc, #128]	; (800088c <getKeyInput+0x100>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	440b      	add	r3, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d01b      	beq.n	800084e <getKeyInput+0xc2>
				keyReg3[i] = keyReg2[i];
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <getKeyInput+0x100>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	7819      	ldrb	r1, [r3, #0]
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <getKeyInput+0x10c>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	460a      	mov	r2, r1
 8000826:	701a      	strb	r2, [r3, #0]
				if(keyReg2[i] == PRESSED_STATE){
 8000828:	4a18      	ldr	r2, [pc, #96]	; (800088c <getKeyInput+0x100>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <getKeyInput+0xe0>
					//TODO
					subKeyProcess(i);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff97 	bl	800076c <subKeyProcess>
					timerForKeyPress = 2*count_inter;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <getKeyInput+0x110>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <getKeyInput+0x114>)
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e00e      	b.n	800086c <getKeyInput+0xe0>
				}
			}else{
				timerForKeyPress--;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <getKeyInput+0x114>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <getKeyInput+0x114>)
 8000858:	701a      	strb	r2, [r3, #0]
				if(timerForKeyPress <= 0){
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <getKeyInput+0x114>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <getKeyInput+0xe0>
					//TODO
					keyReg3[i] = NORMAL_STATE;
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <getKeyInput+0x10c>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<3; i++){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	dd8f      	ble.n	8000798 <getKeyInput+0xc>
					timerForKeyPress = 200;*/
				}
			}
		}
	}
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000000c 	.word	0x2000000c
 8000888:	20000008 	.word	0x20000008
 800088c:	20000010 	.word	0x20000010
 8000890:	20000000 	.word	0x20000000
 8000894:	40010c00 	.word	0x40010c00
 8000898:	20000014 	.word	0x20000014
 800089c:	20000058 	.word	0x20000058
 80008a0:	20000017 	.word	0x20000017

080008a4 <isButtonPressed>:

uint8_t isButtonPressed(uint8_t index){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	if(button_flag[index]){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <isButtonPressed+0x2c>)
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <isButtonPressed+0x20>
		button_flag[index] = 0;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <isButtonPressed+0x2c>)
 80008bc:	2100      	movs	r1, #0
 80008be:	54d1      	strb	r1, [r2, r3]
		return 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e000      	b.n	80008c6 <isButtonPressed+0x22>
	}
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	2000004c 	.word	0x2000004c

080008d4 <fsm_automatic_run1>:
 AUTO_GREEN		4

 ------------------------------------------------------------------*/


void fsm_automatic_run1(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	led_buffer[0] = counter[0]/1000;
 80008d8:	4b5f      	ldr	r3, [pc, #380]	; (8000a58 <fsm_automatic_run1+0x184>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a5f      	ldr	r2, [pc, #380]	; (8000a5c <fsm_automatic_run1+0x188>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1192      	asrs	r2, r2, #6
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <fsm_automatic_run1+0x18c>)
 80008ec:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = (counter[0]/100)%10;
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <fsm_automatic_run1+0x184>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a5c      	ldr	r2, [pc, #368]	; (8000a64 <fsm_automatic_run1+0x190>)
 80008f4:	fb82 1203 	smull	r1, r2, r2, r3
 80008f8:	1152      	asrs	r2, r2, #5
 80008fa:	17db      	asrs	r3, r3, #31
 80008fc:	1ad2      	subs	r2, r2, r3
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <fsm_automatic_run1+0x194>)
 8000900:	fb83 1302 	smull	r1, r3, r3, r2
 8000904:	1099      	asrs	r1, r3, #2
 8000906:	17d3      	asrs	r3, r2, #31
 8000908:	1ac9      	subs	r1, r1, r3
 800090a:	460b      	mov	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	1ad1      	subs	r1, r2, r3
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <fsm_automatic_run1+0x18c>)
 8000918:	705a      	strb	r2, [r3, #1]

	switch (status[0]) {
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <fsm_automatic_run1+0x198>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	2b03      	cmp	r3, #3
 8000922:	f200 808f 	bhi.w	8000a44 <fsm_automatic_run1+0x170>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <fsm_automatic_run1+0x58>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	0800093d 	.word	0x0800093d
 8000930:	08000979 	.word	0x08000979
 8000934:	08000a01 	.word	0x08000a01
 8000938:	080009bd 	.word	0x080009bd
		case INIT:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2120      	movs	r1, #32
 8000940:	484b      	ldr	r0, [pc, #300]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000942:	f001 fc0a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4849      	ldr	r0, [pc, #292]	; (8000a70 <fsm_automatic_run1+0x19c>)
 800094c:	f001 fc05 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4846      	ldr	r0, [pc, #280]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000956:	f001 fc00 	bl	800215a <HAL_GPIO_WritePin>

			status[0] = AUTO_RED;
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <fsm_automatic_run1+0x198>)
 800095c:	2202      	movs	r2, #2
 800095e:	701a      	strb	r2, [r3, #0]
			setTimer(0, count_red*count_inter);
 8000960:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <fsm_automatic_run1+0x1a0>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <fsm_automatic_run1+0x1a4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	fb03 f302 	mul.w	r3, r3, r2
 800096e:	4619      	mov	r1, r3
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fff1 	bl	8001958 <setTimer>
			break;
 8000976:	e06c      	b.n	8000a52 <fsm_automatic_run1+0x17e>
		case AUTO_RED:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2120      	movs	r1, #32
 800097c:	483c      	ldr	r0, [pc, #240]	; (8000a70 <fsm_automatic_run1+0x19c>)
 800097e:	f001 fbec 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	483a      	ldr	r0, [pc, #232]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000988:	f001 fbe7 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	4837      	ldr	r0, [pc, #220]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000992:	f001 fbe2 	bl	800215a <HAL_GPIO_WritePin>

			if(flag[0] == 1){
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <fsm_automatic_run1+0x1a8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d154      	bne.n	8000a48 <fsm_automatic_run1+0x174>
				status[0] = AUTO_GREEN;
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <fsm_automatic_run1+0x198>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	701a      	strb	r2, [r3, #0]
				setTimer(0, count_green*count_inter);
 80009a4:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <fsm_automatic_run1+0x1ac>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <fsm_automatic_run1+0x1a4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	fb03 f302 	mul.w	r3, r3, r2
 80009b2:	4619      	mov	r1, r3
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 ffcf 	bl	8001958 <setTimer>
			}
			break;
 80009ba:	e045      	b.n	8000a48 <fsm_automatic_run1+0x174>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2120      	movs	r1, #32
 80009c0:	482b      	ldr	r0, [pc, #172]	; (8000a70 <fsm_automatic_run1+0x19c>)
 80009c2:	f001 fbca 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <fsm_automatic_run1+0x19c>)
 80009cc:	f001 fbc5 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <fsm_automatic_run1+0x19c>)
 80009d6:	f001 fbc0 	bl	800215a <HAL_GPIO_WritePin>

			if (flag[0] == 1) {
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <fsm_automatic_run1+0x1a8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d134      	bne.n	8000a4c <fsm_automatic_run1+0x178>
				status[0] = AUTO_YELLOW;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <fsm_automatic_run1+0x198>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	701a      	strb	r2, [r3, #0]
				setTimer(0, count_yellow*count_inter);
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <fsm_automatic_run1+0x1b0>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <fsm_automatic_run1+0x1a4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	fb03 f302 	mul.w	r3, r3, r2
 80009f6:	4619      	mov	r1, r3
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 ffad 	bl	8001958 <setTimer>
			}
			break;
 80009fe:	e025      	b.n	8000a4c <fsm_automatic_run1+0x178>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000a06:	f001 fba8 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000a10:	f001 fba3 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4815      	ldr	r0, [pc, #84]	; (8000a70 <fsm_automatic_run1+0x19c>)
 8000a1a:	f001 fb9e 	bl	800215a <HAL_GPIO_WritePin>

			if (flag[0] == 1) {
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <fsm_automatic_run1+0x1a8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d114      	bne.n	8000a50 <fsm_automatic_run1+0x17c>
				status[0] = AUTO_RED;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <fsm_automatic_run1+0x198>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
				setTimer(0, count_red*count_inter);
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <fsm_automatic_run1+0x1a0>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <fsm_automatic_run1+0x1a4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	fb03 f302 	mul.w	r3, r3, r2
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 ff8b 	bl	8001958 <setTimer>
			}
			break;
 8000a42:	e005      	b.n	8000a50 <fsm_automatic_run1+0x17c>
		default:
			break;
 8000a44:	bf00      	nop
 8000a46:	e004      	b.n	8000a52 <fsm_automatic_run1+0x17e>
			break;
 8000a48:	bf00      	nop
 8000a4a:	e002      	b.n	8000a52 <fsm_automatic_run1+0x17e>
			break;
 8000a4c:	bf00      	nop
 8000a4e:	e000      	b.n	8000a52 <fsm_automatic_run1+0x17e>
			break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000068 	.word	0x20000068
 8000a5c:	10624dd3 	.word	0x10624dd3
 8000a60:	20000064 	.word	0x20000064
 8000a64:	51eb851f 	.word	0x51eb851f
 8000a68:	66666667 	.word	0x66666667
 8000a6c:	2000001c 	.word	0x2000001c
 8000a70:	40010800 	.word	0x40010800
 8000a74:	2000001e 	.word	0x2000001e
 8000a78:	20000058 	.word	0x20000058
 8000a7c:	20000078 	.word	0x20000078
 8000a80:	20000020 	.word	0x20000020
 8000a84:	2000001f 	.word	0x2000001f

08000a88 <fsm_automatic_run2>:

void fsm_automatic_run2(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	led_buffer[2] = counter[2]/1000;
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <fsm_automatic_run2+0x17c>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a5d      	ldr	r2, [pc, #372]	; (8000c08 <fsm_automatic_run2+0x180>)
 8000a92:	fb82 1203 	smull	r1, r2, r2, r3
 8000a96:	1192      	asrs	r2, r2, #6
 8000a98:	17db      	asrs	r3, r3, #31
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <fsm_automatic_run2+0x184>)
 8000aa0:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = (counter[2]/100)%10;
 8000aa2:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <fsm_automatic_run2+0x17c>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a5a      	ldr	r2, [pc, #360]	; (8000c10 <fsm_automatic_run2+0x188>)
 8000aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aac:	1152      	asrs	r2, r2, #5
 8000aae:	17db      	asrs	r3, r3, #31
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <fsm_automatic_run2+0x18c>)
 8000ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab8:	1099      	asrs	r1, r3, #2
 8000aba:	17d3      	asrs	r3, r2, #31
 8000abc:	1ac9      	subs	r1, r1, r3
 8000abe:	460b      	mov	r3, r1
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	1ad1      	subs	r1, r2, r3
 8000ac8:	b2ca      	uxtb	r2, r1
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <fsm_automatic_run2+0x184>)
 8000acc:	70da      	strb	r2, [r3, #3]

	switch (status[1]) {
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <fsm_automatic_run2+0x190>)
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	f200 808e 	bhi.w	8000bf6 <fsm_automatic_run2+0x16e>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <fsm_automatic_run2+0x58>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af1 	.word	0x08000af1
 8000ae4:	08000bb5 	.word	0x08000bb5
 8000ae8:	08000b71 	.word	0x08000b71
 8000aec:	08000b2d 	.word	0x08000b2d
		case INIT:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2104      	movs	r1, #4
 8000af4:	4849      	ldr	r0, [pc, #292]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000af6:	f001 fb30 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2108      	movs	r1, #8
 8000afe:	4847      	ldr	r0, [pc, #284]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b00:	f001 fb2b 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	4844      	ldr	r0, [pc, #272]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b0a:	f001 fb26 	bl	800215a <HAL_GPIO_WritePin>

			status[1] = AUTO_GREEN;
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <fsm_automatic_run2+0x190>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	705a      	strb	r2, [r3, #1]
			setTimer(2, count_green*count_inter);
 8000b14:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <fsm_automatic_run2+0x198>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <fsm_automatic_run2+0x19c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	fb03 f302 	mul.w	r3, r3, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	2002      	movs	r0, #2
 8000b26:	f000 ff17 	bl	8001958 <setTimer>
			break;
 8000b2a:	e069      	b.n	8000c00 <fsm_automatic_run2+0x178>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2104      	movs	r1, #4
 8000b30:	483a      	ldr	r0, [pc, #232]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b32:	f001 fb12 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4838      	ldr	r0, [pc, #224]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b3c:	f001 fb0d 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	4835      	ldr	r0, [pc, #212]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b46:	f001 fb08 	bl	800215a <HAL_GPIO_WritePin>

			if(flag[2] == 1){
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <fsm_automatic_run2+0x1a0>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d153      	bne.n	8000bfa <fsm_automatic_run2+0x172>
				status[1] = AUTO_YELLOW;
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <fsm_automatic_run2+0x190>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	705a      	strb	r2, [r3, #1]
				setTimer(2, count_yellow*count_inter);
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <fsm_automatic_run2+0x1a4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <fsm_automatic_run2+0x19c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	fb03 f302 	mul.w	r3, r3, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 fef5 	bl	8001958 <setTimer>
			}
			break;
 8000b6e:	e044      	b.n	8000bfa <fsm_automatic_run2+0x172>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2104      	movs	r1, #4
 8000b74:	4829      	ldr	r0, [pc, #164]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b76:	f001 faf0 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b80:	f001 faeb 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2110      	movs	r1, #16
 8000b88:	4824      	ldr	r0, [pc, #144]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000b8a:	f001 fae6 	bl	800215a <HAL_GPIO_WritePin>

			if(flag[2] == 1){
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <fsm_automatic_run2+0x1a0>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d133      	bne.n	8000bfe <fsm_automatic_run2+0x176>
				status[1] = AUTO_RED;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <fsm_automatic_run2+0x190>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	705a      	strb	r2, [r3, #1]
				setTimer(2, count_red*count_inter);
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <fsm_automatic_run2+0x1a8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <fsm_automatic_run2+0x19c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	fb03 f302 	mul.w	r3, r3, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 fed3 	bl	8001958 <setTimer>
			}
			break;
 8000bb2:	e024      	b.n	8000bfe <fsm_automatic_run2+0x176>
		case AUTO_RED:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000bba:	f001 face 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000bc4:	f001 fac9 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <fsm_automatic_run2+0x194>)
 8000bce:	f001 fac4 	bl	800215a <HAL_GPIO_WritePin>

			if(flag[2] == 1){
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <fsm_automatic_run2+0x1a0>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10d      	bne.n	8000bf6 <fsm_automatic_run2+0x16e>
				status[1] = AUTO_GREEN;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <fsm_automatic_run2+0x190>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	705a      	strb	r2, [r3, #1]
				setTimer(2, count_green*count_inter);
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <fsm_automatic_run2+0x198>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <fsm_automatic_run2+0x19c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	fb03 f302 	mul.w	r3, r3, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 feb1 	bl	8001958 <setTimer>
			}
		default:
			break;
 8000bf6:	bf00      	nop
 8000bf8:	e002      	b.n	8000c00 <fsm_automatic_run2+0x178>
			break;
 8000bfa:	bf00      	nop
 8000bfc:	e000      	b.n	8000c00 <fsm_automatic_run2+0x178>
			break;
 8000bfe:	bf00      	nop
	}
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000068 	.word	0x20000068
 8000c08:	10624dd3 	.word	0x10624dd3
 8000c0c:	20000064 	.word	0x20000064
 8000c10:	51eb851f 	.word	0x51eb851f
 8000c14:	66666667 	.word	0x66666667
 8000c18:	2000001c 	.word	0x2000001c
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	20000020 	.word	0x20000020
 8000c24:	20000058 	.word	0x20000058
 8000c28:	20000078 	.word	0x20000078
 8000c2c:	2000001f 	.word	0x2000001f
 8000c30:	2000001e 	.word	0x2000001e

08000c34 <fsm_mode>:
 *      Author: Windows
 */

#include "fsm_mode.h"

void fsm_mode(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	switch (mode) {
 8000c38:	4ba1      	ldr	r3, [pc, #644]	; (8000ec0 <fsm_mode+0x28c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	f200 81f0 	bhi.w	8001024 <fsm_mode+0x3f0>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <fsm_mode+0x18>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c67 	.word	0x08000c67
 8000c54:	08000d89 	.word	0x08000d89
 8000c58:	08000ef1 	.word	0x08000ef1
		case 1:
			fsm_automatic_run1();
 8000c5c:	f7ff fe3a 	bl	80008d4 <fsm_automatic_run1>
			fsm_automatic_run2();
 8000c60:	f7ff ff12 	bl	8000a88 <fsm_automatic_run2>
			break;
 8000c64:	e1e5      	b.n	8001032 <fsm_mode+0x3fe>
		case 2:
			if(flag[3] == 1){
 8000c66:	4b97      	ldr	r3, [pc, #604]	; (8000ec4 <fsm_mode+0x290>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d130      	bne.n	8000cd0 <fsm_mode+0x9c>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000c6e:	2120      	movs	r1, #32
 8000c70:	4895      	ldr	r0, [pc, #596]	; (8000ec8 <fsm_mode+0x294>)
 8000c72:	f001 fa8a 	bl	800218a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000c76:	2104      	movs	r1, #4
 8000c78:	4893      	ldr	r0, [pc, #588]	; (8000ec8 <fsm_mode+0x294>)
 8000c7a:	f001 fa86 	bl	800218a <HAL_GPIO_TogglePin>

				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4891      	ldr	r0, [pc, #580]	; (8000ec8 <fsm_mode+0x294>)
 8000c84:	f001 fa69 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	488e      	ldr	r0, [pc, #568]	; (8000ec8 <fsm_mode+0x294>)
 8000c8e:	f001 fa64 	bl	800215a <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	488c      	ldr	r0, [pc, #560]	; (8000ec8 <fsm_mode+0x294>)
 8000c98:	f001 fa5f 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4889      	ldr	r0, [pc, #548]	; (8000ec8 <fsm_mode+0x294>)
 8000ca2:	f001 fa5a 	bl	800215a <HAL_GPIO_WritePin>

				setTimer(3, (int)(0.5*count_inter));
 8000ca6:	4b89      	ldr	r3, [pc, #548]	; (8000ecc <fsm_mode+0x298>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fcbc 	bl	8000628 <__aeabi_ui2d>
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	4b86      	ldr	r3, [pc, #536]	; (8000ed0 <fsm_mode+0x29c>)
 8000cb6:	f7ff fa4b 	bl	8000150 <__aeabi_dmul>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f7ff fd2b 	bl	800071c <__aeabi_d2iz>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f000 fe44 	bl	8001958 <setTimer>
			}

			if(temp[1] || temp[2])
 8000cd0:	4b80      	ldr	r3, [pc, #512]	; (8000ed4 <fsm_mode+0x2a0>)
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <fsm_mode+0xac>
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	; (8000ed4 <fsm_mode+0x2a0>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <fsm_mode+0xba>
				temp[1] = temp[2] = 0; //free temp
 8000ce0:	4b7c      	ldr	r3, [pc, #496]	; (8000ed4 <fsm_mode+0x2a0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	709a      	strb	r2, [r3, #2]
 8000ce6:	4b7b      	ldr	r3, [pc, #492]	; (8000ed4 <fsm_mode+0x2a0>)
 8000ce8:	789a      	ldrb	r2, [r3, #2]
 8000cea:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <fsm_mode+0x2a0>)
 8000cec:	705a      	strb	r2, [r3, #1]

			if(!temp[0])
 8000cee:	4b79      	ldr	r3, [pc, #484]	; (8000ed4 <fsm_mode+0x2a0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <fsm_mode+0xca>
				temp[0] = count_red;
 8000cf6:	4b78      	ldr	r3, [pc, #480]	; (8000ed8 <fsm_mode+0x2a4>)
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <fsm_mode+0x2a0>)
 8000cfc:	701a      	strb	r2, [r3, #0]

			led_buffer[0] = 0;
 8000cfe:	4b77      	ldr	r3, [pc, #476]	; (8000edc <fsm_mode+0x2a8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 2;
 8000d04:	4b75      	ldr	r3, [pc, #468]	; (8000edc <fsm_mode+0x2a8>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	705a      	strb	r2, [r3, #1]

			led_buffer[2] = temp[0]/10;
 8000d0a:	4b72      	ldr	r3, [pc, #456]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4a74      	ldr	r2, [pc, #464]	; (8000ee0 <fsm_mode+0x2ac>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b70      	ldr	r3, [pc, #448]	; (8000edc <fsm_mode+0x2a8>)
 8000d1a:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = temp[0]%10;
 8000d1c:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	4b6f      	ldr	r3, [pc, #444]	; (8000ee0 <fsm_mode+0x2ac>)
 8000d22:	fba3 1302 	umull	r1, r3, r3, r2
 8000d26:	08d9      	lsrs	r1, r3, #3
 8000d28:	460b      	mov	r3, r1
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b69      	ldr	r3, [pc, #420]	; (8000edc <fsm_mode+0x2a8>)
 8000d36:	70da      	strb	r2, [r3, #3]

			if(isButtonPressed(1)){
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fdb3 	bl	80008a4 <isButtonPressed>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00c      	beq.n	8000d5e <fsm_mode+0x12a>
				temp[0]++;
 8000d44:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b61      	ldr	r3, [pc, #388]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d4e:	701a      	strb	r2, [r3, #0]
				if(temp[0] > 99)
 8000d50:	4b60      	ldr	r3, [pc, #384]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b63      	cmp	r3, #99	; 0x63
 8000d56:	d902      	bls.n	8000d5e <fsm_mode+0x12a>
					temp[0] = 1;
 8000d58:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff fda0 	bl	80008a4 <isButtonPressed>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 815e 	beq.w	8001028 <fsm_mode+0x3f4>
				count_red = temp[0];
 8000d6c:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <fsm_mode+0x2a0>)
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <fsm_mode+0x2a4>)
 8000d72:	701a      	strb	r2, [r3, #0]
				mode = 1;
 8000d74:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <fsm_mode+0x28c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
				status[0] = INIT;
 8000d7a:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <fsm_mode+0x2b0>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
				status[1] = INIT;
 8000d80:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <fsm_mode+0x2b0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000d86:	e14f      	b.n	8001028 <fsm_mode+0x3f4>
		case 3:
			if(flag[3] == 1){
 8000d88:	4b4e      	ldr	r3, [pc, #312]	; (8000ec4 <fsm_mode+0x290>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d130      	bne.n	8000df2 <fsm_mode+0x1be>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	484d      	ldr	r0, [pc, #308]	; (8000ec8 <fsm_mode+0x294>)
 8000d94:	f001 f9f9 	bl	800218a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000d98:	2108      	movs	r1, #8
 8000d9a:	484b      	ldr	r0, [pc, #300]	; (8000ec8 <fsm_mode+0x294>)
 8000d9c:	f001 f9f5 	bl	800218a <HAL_GPIO_TogglePin>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2120      	movs	r1, #32
 8000da4:	4848      	ldr	r0, [pc, #288]	; (8000ec8 <fsm_mode+0x294>)
 8000da6:	f001 f9d8 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2104      	movs	r1, #4
 8000dae:	4846      	ldr	r0, [pc, #280]	; (8000ec8 <fsm_mode+0x294>)
 8000db0:	f001 f9d3 	bl	800215a <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <fsm_mode+0x294>)
 8000dba:	f001 f9ce 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <fsm_mode+0x294>)
 8000dc4:	f001 f9c9 	bl	800215a <HAL_GPIO_WritePin>

				setTimer(3, (int)(0.5*count_inter));
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <fsm_mode+0x298>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc2b 	bl	8000628 <__aeabi_ui2d>
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <fsm_mode+0x29c>)
 8000dd8:	f7ff f9ba 	bl	8000150 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fc9a 	bl	800071c <__aeabi_d2iz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 fdb3 	bl	8001958 <setTimer>
			}

			if(temp[0] || temp[2])
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <fsm_mode+0x2a0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d103      	bne.n	8000e02 <fsm_mode+0x1ce>
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <fsm_mode+0x2a0>)
 8000dfc:	789b      	ldrb	r3, [r3, #2]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <fsm_mode+0x1dc>
				temp[0] = temp[2] = 0;
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	709a      	strb	r2, [r3, #2]
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e0a:	789a      	ldrb	r2, [r3, #2]
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e0e:	701a      	strb	r2, [r3, #0]

			if(!temp[1])
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d103      	bne.n	8000e20 <fsm_mode+0x1ec>
				temp[1] = count_yellow;
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <fsm_mode+0x2b4>)
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e1e:	705a      	strb	r2, [r3, #1]

			led_buffer[0] = 0;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <fsm_mode+0x2a8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 3;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <fsm_mode+0x2a8>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	705a      	strb	r2, [r3, #1]

			led_buffer[2] = temp[1]/10;
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <fsm_mode+0x2ac>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <fsm_mode+0x2a8>)
 8000e3c:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = temp[1]%10;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e40:	785a      	ldrb	r2, [r3, #1]
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <fsm_mode+0x2ac>)
 8000e44:	fba3 1302 	umull	r1, r3, r3, r2
 8000e48:	08d9      	lsrs	r1, r3, #3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <fsm_mode+0x2a8>)
 8000e58:	70da      	strb	r2, [r3, #3]

			if(isButtonPressed(1)){
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fd22 	bl	80008a4 <isButtonPressed>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d016      	beq.n	8000e94 <fsm_mode+0x260>
				temp[1]++;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e70:	705a      	strb	r2, [r3, #1]
				if(temp[1] > 99 || temp[1] + count_green > count_red)
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	2b63      	cmp	r3, #99	; 0x63
 8000e78:	d809      	bhi.n	8000e8e <fsm_mode+0x25a>
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <fsm_mode+0x2b8>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <fsm_mode+0x2a4>)
 8000e88:	7812      	ldrb	r2, [r2, #0]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	dd02      	ble.n	8000e94 <fsm_mode+0x260>
					temp[1] = 1;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <fsm_mode+0x2a0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	705a      	strb	r2, [r3, #1]
			}
			if(isButtonPressed(2)){
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fd05 	bl	80008a4 <isButtonPressed>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80c5 	beq.w	800102c <fsm_mode+0x3f8>
				count_yellow = temp[1];
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <fsm_mode+0x2a0>)
 8000ea4:	785a      	ldrb	r2, [r3, #1]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <fsm_mode+0x2b4>)
 8000ea8:	701a      	strb	r2, [r3, #0]
				mode = 1;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <fsm_mode+0x28c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
				status[0] = INIT;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <fsm_mode+0x2b0>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
				status[1] = INIT;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <fsm_mode+0x2b0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000ebc:	e0b6      	b.n	800102c <fsm_mode+0x3f8>
 8000ebe:	bf00      	nop
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	20000078 	.word	0x20000078
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	3fe00000 	.word	0x3fe00000
 8000ed4:	20000060 	.word	0x20000060
 8000ed8:	2000001e 	.word	0x2000001e
 8000edc:	20000064 	.word	0x20000064
 8000ee0:	cccccccd 	.word	0xcccccccd
 8000ee4:	2000001c 	.word	0x2000001c
 8000ee8:	2000001f 	.word	0x2000001f
 8000eec:	20000020 	.word	0x20000020
		case 4:
			if(flag[3] == 1){
 8000ef0:	4b51      	ldr	r3, [pc, #324]	; (8001038 <fsm_mode+0x404>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d130      	bne.n	8000f5a <fsm_mode+0x326>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	4850      	ldr	r0, [pc, #320]	; (800103c <fsm_mode+0x408>)
 8000efc:	f001 f945 	bl	800218a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000f00:	2110      	movs	r1, #16
 8000f02:	484e      	ldr	r0, [pc, #312]	; (800103c <fsm_mode+0x408>)
 8000f04:	f001 f941 	bl	800218a <HAL_GPIO_TogglePin>

				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	484b      	ldr	r0, [pc, #300]	; (800103c <fsm_mode+0x408>)
 8000f0e:	f001 f924 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	4849      	ldr	r0, [pc, #292]	; (800103c <fsm_mode+0x408>)
 8000f18:	f001 f91f 	bl	800215a <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4846      	ldr	r0, [pc, #280]	; (800103c <fsm_mode+0x408>)
 8000f22:	f001 f91a 	bl	800215a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <fsm_mode+0x408>)
 8000f2c:	f001 f915 	bl	800215a <HAL_GPIO_WritePin>

				setTimer(3, (int)(0.5*count_inter));
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <fsm_mode+0x40c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb77 	bl	8000628 <__aeabi_ui2d>
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <fsm_mode+0x410>)
 8000f40:	f7ff f906 	bl	8000150 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fbe6 	bl	800071c <__aeabi_d2iz>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4619      	mov	r1, r3
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fcff 	bl	8001958 <setTimer>
			}

			if(temp[0] || temp[1])
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <fsm_mode+0x414>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <fsm_mode+0x336>
 8000f62:	4b39      	ldr	r3, [pc, #228]	; (8001048 <fsm_mode+0x414>)
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <fsm_mode+0x344>
				temp[0] = temp[1] =0;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <fsm_mode+0x414>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	705a      	strb	r2, [r3, #1]
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <fsm_mode+0x414>)
 8000f72:	785a      	ldrb	r2, [r3, #1]
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <fsm_mode+0x414>)
 8000f76:	701a      	strb	r2, [r3, #0]

			if(!temp[2])
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <fsm_mode+0x414>)
 8000f7a:	789b      	ldrb	r3, [r3, #2]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <fsm_mode+0x354>
				temp[2] = count_green;
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <fsm_mode+0x418>)
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <fsm_mode+0x414>)
 8000f86:	709a      	strb	r2, [r3, #2]

			led_buffer[0] = 0;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <fsm_mode+0x41c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 4;
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <fsm_mode+0x41c>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	705a      	strb	r2, [r3, #1]

			led_buffer[2] = temp[2]/10;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <fsm_mode+0x414>)
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <fsm_mode+0x420>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <fsm_mode+0x41c>)
 8000fa4:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = temp[2]%10;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <fsm_mode+0x414>)
 8000fa8:	789a      	ldrb	r2, [r3, #2]
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <fsm_mode+0x420>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	08d9      	lsrs	r1, r3, #3
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <fsm_mode+0x41c>)
 8000fc0:	70da      	strb	r2, [r3, #3]

			if(isButtonPressed(1)){
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff fc6e 	bl	80008a4 <isButtonPressed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d016      	beq.n	8000ffc <fsm_mode+0x3c8>
				temp[2]++;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <fsm_mode+0x414>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <fsm_mode+0x414>)
 8000fd8:	709a      	strb	r2, [r3, #2]
				if(temp[2] > 99 || temp[2] + count_yellow > count_red)
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <fsm_mode+0x414>)
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	2b63      	cmp	r3, #99	; 0x63
 8000fe0:	d809      	bhi.n	8000ff6 <fsm_mode+0x3c2>
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <fsm_mode+0x414>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <fsm_mode+0x424>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <fsm_mode+0x428>)
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	dd02      	ble.n	8000ffc <fsm_mode+0x3c8>
					temp[2] = 1;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <fsm_mode+0x414>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	709a      	strb	r2, [r3, #2]
			}
			if(isButtonPressed(2)){
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fc51 	bl	80008a4 <isButtonPressed>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <fsm_mode+0x3fc>
				count_green = temp[2];
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <fsm_mode+0x414>)
 800100a:	789a      	ldrb	r2, [r3, #2]
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <fsm_mode+0x418>)
 800100e:	701a      	strb	r2, [r3, #0]
				mode = 1;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <fsm_mode+0x42c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
				status[0] = INIT;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <fsm_mode+0x430>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
				status[1] = INIT;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <fsm_mode+0x430>)
 800101e:	2201      	movs	r2, #1
 8001020:	705a      	strb	r2, [r3, #1]
			}
			break;
 8001022:	e005      	b.n	8001030 <fsm_mode+0x3fc>

		default:
			break;
 8001024:	bf00      	nop
 8001026:	e004      	b.n	8001032 <fsm_mode+0x3fe>
			break;
 8001028:	bf00      	nop
 800102a:	e002      	b.n	8001032 <fsm_mode+0x3fe>
			break;
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <fsm_mode+0x3fe>
			break;
 8001030:	bf00      	nop
	}
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000078 	.word	0x20000078
 800103c:	40010800 	.word	0x40010800
 8001040:	20000058 	.word	0x20000058
 8001044:	3fe00000 	.word	0x3fe00000
 8001048:	20000060 	.word	0x20000060
 800104c:	20000020 	.word	0x20000020
 8001050:	20000064 	.word	0x20000064
 8001054:	cccccccd 	.word	0xcccccccd
 8001058:	2000001f 	.word	0x2000001f
 800105c:	2000001e 	.word	0x2000001e
 8001060:	20000018 	.word	0x20000018
 8001064:	2000001c 	.word	0x2000001c

08001068 <display7segLed>:

#include "led_7_seg.h"
#include "main.h"

//display led value
void display7segLed(uint8_t num){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b09      	cmp	r3, #9
 8001076:	f200 81bb 	bhi.w	80013f0 <display7segLed+0x388>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <display7segLed+0x18>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010a9 	.word	0x080010a9
 8001084:	080010fd 	.word	0x080010fd
 8001088:	08001151 	.word	0x08001151
 800108c:	080011a5 	.word	0x080011a5
 8001090:	080011f9 	.word	0x080011f9
 8001094:	0800124d 	.word	0x0800124d
 8001098:	080012a1 	.word	0x080012a1
 800109c:	080012f5 	.word	0x080012f5
 80010a0:	08001349 	.word	0x08001349
 80010a4:	0800139d 	.word	0x0800139d
	  		case 0:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	48d3      	ldr	r0, [pc, #844]	; (80013fc <display7segLed+0x394>)
 80010b0:	f001 f853 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	48d0      	ldr	r0, [pc, #832]	; (80013fc <display7segLed+0x394>)
 80010ba:	f001 f84e 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	48cd      	ldr	r0, [pc, #820]	; (80013fc <display7segLed+0x394>)
 80010c6:	f001 f848 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	48ca      	ldr	r0, [pc, #808]	; (80013fc <display7segLed+0x394>)
 80010d2:	f001 f842 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	48c7      	ldr	r0, [pc, #796]	; (80013fc <display7segLed+0x394>)
 80010de:	f001 f83c 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	48c4      	ldr	r0, [pc, #784]	; (80013fc <display7segLed+0x394>)
 80010ea:	f001 f836 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	48c1      	ldr	r0, [pc, #772]	; (80013fc <display7segLed+0x394>)
 80010f6:	f001 f830 	bl	800215a <HAL_GPIO_WritePin>

	  			break;
 80010fa:	e17a      	b.n	80013f2 <display7segLed+0x38a>
	  		case 1:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001102:	48be      	ldr	r0, [pc, #760]	; (80013fc <display7segLed+0x394>)
 8001104:	f001 f829 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2102      	movs	r1, #2
 800110c:	48bb      	ldr	r0, [pc, #748]	; (80013fc <display7segLed+0x394>)
 800110e:	f001 f824 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	48b8      	ldr	r0, [pc, #736]	; (80013fc <display7segLed+0x394>)
 800111a:	f001 f81e 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	48b5      	ldr	r0, [pc, #724]	; (80013fc <display7segLed+0x394>)
 8001126:	f001 f818 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	48b2      	ldr	r0, [pc, #712]	; (80013fc <display7segLed+0x394>)
 8001132:	f001 f812 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113c:	48af      	ldr	r0, [pc, #700]	; (80013fc <display7segLed+0x394>)
 800113e:	f001 f80c 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	48ac      	ldr	r0, [pc, #688]	; (80013fc <display7segLed+0x394>)
 800114a:	f001 f806 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 800114e:	e150      	b.n	80013f2 <display7segLed+0x38a>
	  		case 2:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001156:	48a9      	ldr	r0, [pc, #676]	; (80013fc <display7segLed+0x394>)
 8001158:	f000 ffff 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2102      	movs	r1, #2
 8001160:	48a6      	ldr	r0, [pc, #664]	; (80013fc <display7segLed+0x394>)
 8001162:	f000 fffa 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	48a3      	ldr	r0, [pc, #652]	; (80013fc <display7segLed+0x394>)
 800116e:	f000 fff4 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	48a0      	ldr	r0, [pc, #640]	; (80013fc <display7segLed+0x394>)
 800117a:	f000 ffee 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	489d      	ldr	r0, [pc, #628]	; (80013fc <display7segLed+0x394>)
 8001186:	f000 ffe8 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001190:	489a      	ldr	r0, [pc, #616]	; (80013fc <display7segLed+0x394>)
 8001192:	f000 ffe2 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800119c:	4897      	ldr	r0, [pc, #604]	; (80013fc <display7segLed+0x394>)
 800119e:	f000 ffdc 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 80011a2:	e126      	b.n	80013f2 <display7segLed+0x38a>
	  		case 3:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4894      	ldr	r0, [pc, #592]	; (80013fc <display7segLed+0x394>)
 80011ac:	f000 ffd5 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	4891      	ldr	r0, [pc, #580]	; (80013fc <display7segLed+0x394>)
 80011b6:	f000 ffd0 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	488e      	ldr	r0, [pc, #568]	; (80013fc <display7segLed+0x394>)
 80011c2:	f000 ffca 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	488b      	ldr	r0, [pc, #556]	; (80013fc <display7segLed+0x394>)
 80011ce:	f000 ffc4 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4888      	ldr	r0, [pc, #544]	; (80013fc <display7segLed+0x394>)
 80011da:	f000 ffbe 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e4:	4885      	ldr	r0, [pc, #532]	; (80013fc <display7segLed+0x394>)
 80011e6:	f000 ffb8 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4882      	ldr	r0, [pc, #520]	; (80013fc <display7segLed+0x394>)
 80011f2:	f000 ffb2 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 80011f6:	e0fc      	b.n	80013f2 <display7segLed+0x38a>
	  		case 4:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fe:	487f      	ldr	r0, [pc, #508]	; (80013fc <display7segLed+0x394>)
 8001200:	f000 ffab 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	487c      	ldr	r0, [pc, #496]	; (80013fc <display7segLed+0x394>)
 800120a:	f000 ffa6 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4879      	ldr	r0, [pc, #484]	; (80013fc <display7segLed+0x394>)
 8001216:	f000 ffa0 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	4876      	ldr	r0, [pc, #472]	; (80013fc <display7segLed+0x394>)
 8001222:	f000 ff9a 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800122c:	4873      	ldr	r0, [pc, #460]	; (80013fc <display7segLed+0x394>)
 800122e:	f000 ff94 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	4870      	ldr	r0, [pc, #448]	; (80013fc <display7segLed+0x394>)
 800123a:	f000 ff8e 	bl	800215a <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001244:	486d      	ldr	r0, [pc, #436]	; (80013fc <display7segLed+0x394>)
 8001246:	f000 ff88 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 800124a:	e0d2      	b.n	80013f2 <display7segLed+0x38a>
	  		case 5:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001252:	486a      	ldr	r0, [pc, #424]	; (80013fc <display7segLed+0x394>)
 8001254:	f000 ff81 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2102      	movs	r1, #2
 800125c:	4867      	ldr	r0, [pc, #412]	; (80013fc <display7segLed+0x394>)
 800125e:	f000 ff7c 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4864      	ldr	r0, [pc, #400]	; (80013fc <display7segLed+0x394>)
 800126a:	f000 ff76 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	4861      	ldr	r0, [pc, #388]	; (80013fc <display7segLed+0x394>)
 8001276:	f000 ff70 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	485e      	ldr	r0, [pc, #376]	; (80013fc <display7segLed+0x394>)
 8001282:	f000 ff6a 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128c:	485b      	ldr	r0, [pc, #364]	; (80013fc <display7segLed+0x394>)
 800128e:	f000 ff64 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <display7segLed+0x394>)
 800129a:	f000 ff5e 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 800129e:	e0a8      	b.n	80013f2 <display7segLed+0x38a>
	  		case 6:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a6:	4855      	ldr	r0, [pc, #340]	; (80013fc <display7segLed+0x394>)
 80012a8:	f000 ff57 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	4852      	ldr	r0, [pc, #328]	; (80013fc <display7segLed+0x394>)
 80012b2:	f000 ff52 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	484f      	ldr	r0, [pc, #316]	; (80013fc <display7segLed+0x394>)
 80012be:	f000 ff4c 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c8:	484c      	ldr	r0, [pc, #304]	; (80013fc <display7segLed+0x394>)
 80012ca:	f000 ff46 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	4849      	ldr	r0, [pc, #292]	; (80013fc <display7segLed+0x394>)
 80012d6:	f000 ff40 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	4846      	ldr	r0, [pc, #280]	; (80013fc <display7segLed+0x394>)
 80012e2:	f000 ff3a 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	4843      	ldr	r0, [pc, #268]	; (80013fc <display7segLed+0x394>)
 80012ee:	f000 ff34 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 80012f2:	e07e      	b.n	80013f2 <display7segLed+0x38a>
	  		case 7:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fa:	4840      	ldr	r0, [pc, #256]	; (80013fc <display7segLed+0x394>)
 80012fc:	f000 ff2d 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	483d      	ldr	r0, [pc, #244]	; (80013fc <display7segLed+0x394>)
 8001306:	f000 ff28 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001310:	483a      	ldr	r0, [pc, #232]	; (80013fc <display7segLed+0x394>)
 8001312:	f000 ff22 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	4837      	ldr	r0, [pc, #220]	; (80013fc <display7segLed+0x394>)
 800131e:	f000 ff1c 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	4834      	ldr	r0, [pc, #208]	; (80013fc <display7segLed+0x394>)
 800132a:	f000 ff16 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	4831      	ldr	r0, [pc, #196]	; (80013fc <display7segLed+0x394>)
 8001336:	f000 ff10 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	482e      	ldr	r0, [pc, #184]	; (80013fc <display7segLed+0x394>)
 8001342:	f000 ff0a 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 8001346:	e054      	b.n	80013f2 <display7segLed+0x38a>
	  		case 8:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134e:	482b      	ldr	r0, [pc, #172]	; (80013fc <display7segLed+0x394>)
 8001350:	f000 ff03 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2102      	movs	r1, #2
 8001358:	4828      	ldr	r0, [pc, #160]	; (80013fc <display7segLed+0x394>)
 800135a:	f000 fefe 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <display7segLed+0x394>)
 8001366:	f000 fef8 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <display7segLed+0x394>)
 8001372:	f000 fef2 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <display7segLed+0x394>)
 800137e:	f000 feec 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	481c      	ldr	r0, [pc, #112]	; (80013fc <display7segLed+0x394>)
 800138a:	f000 fee6 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <display7segLed+0x394>)
 8001396:	f000 fee0 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 800139a:	e02a      	b.n	80013f2 <display7segLed+0x38a>
	  		case 9:
	  			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <display7segLed+0x394>)
 80013a4:	f000 fed9 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2102      	movs	r1, #2
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <display7segLed+0x394>)
 80013ae:	f000 fed4 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <display7segLed+0x394>)
 80013ba:	f000 fece 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <display7segLed+0x394>)
 80013c6:	f000 fec8 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <display7segLed+0x394>)
 80013d2:	f000 fec2 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <display7segLed+0x394>)
 80013de:	f000 febc 	bl	800215a <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <display7segLed+0x394>)
 80013ea:	f000 feb6 	bl	800215a <HAL_GPIO_WritePin>
	  			break;
 80013ee:	e000      	b.n	80013f2 <display7segLed+0x38a>
	  		default:

	  			break;
 80013f0:	bf00      	nop
	  	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010800 	.word	0x40010800

08001400 <scan_led>:

//scan led
void scan_led(void){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	switch (key_sw) {
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <scan_led+0x260>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	f200 8119 	bhi.w	8001640 <scan_led+0x240>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <scan_led+0x14>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001429 	.word	0x08001429
 8001418:	0800148d 	.word	0x0800148d
 800141c:	080014fb 	.word	0x080014fb
 8001420:	08001569 	.word	0x08001569
 8001424:	080015d5 	.word	0x080015d5
		case 0://INIT
			HAL_GPIO_WritePin(SW1_GPIO_Port, SW1_Pin, RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2108      	movs	r1, #8
 800142c:	488d      	ldr	r0, [pc, #564]	; (8001664 <scan_led+0x264>)
 800142e:	f000 fe94 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW2_GPIO_Port, SW2_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	488b      	ldr	r0, [pc, #556]	; (8001664 <scan_led+0x264>)
 8001438:	f000 fe8f 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW3_GPIO_Port, SW3_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2120      	movs	r1, #32
 8001440:	4888      	ldr	r0, [pc, #544]	; (8001664 <scan_led+0x264>)
 8001442:	f000 fe8a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW4_GPIO_Port, SW4_Pin, SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	4886      	ldr	r0, [pc, #536]	; (8001664 <scan_led+0x264>)
 800144c:	f000 fe85 	bl	800215a <HAL_GPIO_WritePin>

			display7segLed(led_buffer[0]);
 8001450:	4b85      	ldr	r3, [pc, #532]	; (8001668 <scan_led+0x268>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe07 	bl	8001068 <display7segLed>

			key_sw = 1;
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <scan_led+0x260>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
			setTimer(1, (int)(0.1*count_inter));
 8001460:	4b82      	ldr	r3, [pc, #520]	; (800166c <scan_led+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f8df 	bl	8000628 <__aeabi_ui2d>
 800146a:	a37b      	add	r3, pc, #492	; (adr r3, 8001658 <scan_led+0x258>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7fe fe6e 	bl	8000150 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff f94e 	bl	800071c <__aeabi_d2iz>
 8001480:	4603      	mov	r3, r0
 8001482:	4619      	mov	r1, r3
 8001484:	2001      	movs	r0, #1
 8001486:	f000 fa67 	bl	8001958 <setTimer>
			break;
 800148a:	e0e2      	b.n	8001652 <scan_led+0x252>
		case 1:
			HAL_GPIO_WritePin(SW1_GPIO_Port, SW1_Pin, RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2108      	movs	r1, #8
 8001490:	4874      	ldr	r0, [pc, #464]	; (8001664 <scan_led+0x264>)
 8001492:	f000 fe62 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW2_GPIO_Port, SW2_Pin, SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2110      	movs	r1, #16
 800149a:	4872      	ldr	r0, [pc, #456]	; (8001664 <scan_led+0x264>)
 800149c:	f000 fe5d 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW3_GPIO_Port, SW3_Pin, SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2120      	movs	r1, #32
 80014a4:	486f      	ldr	r0, [pc, #444]	; (8001664 <scan_led+0x264>)
 80014a6:	f000 fe58 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW4_GPIO_Port, SW4_Pin, SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	486d      	ldr	r0, [pc, #436]	; (8001664 <scan_led+0x264>)
 80014b0:	f000 fe53 	bl	800215a <HAL_GPIO_WritePin>

			//if(mode == 1)
				display7segLed(led_buffer[0]);
 80014b4:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <scan_led+0x268>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdd5 	bl	8001068 <display7segLed>

			if(flag[1] == 1){
 80014be:	4b6c      	ldr	r3, [pc, #432]	; (8001670 <scan_led+0x270>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	f040 80be 	bne.w	8001644 <scan_led+0x244>
				key_sw = 2;
 80014c8:	4b65      	ldr	r3, [pc, #404]	; (8001660 <scan_led+0x260>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	701a      	strb	r2, [r3, #0]
				setTimer(1, (int)(0.1*count_inter));
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <scan_led+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f8a8 	bl	8000628 <__aeabi_ui2d>
 80014d8:	a35f      	add	r3, pc, #380	; (adr r3, 8001658 <scan_led+0x258>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fe37 	bl	8000150 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff f917 	bl	800071c <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 fa30 	bl	8001958 <setTimer>
			}
			break;
 80014f8:	e0a4      	b.n	8001644 <scan_led+0x244>
		case 2:
			HAL_GPIO_WritePin(SW1_GPIO_Port, SW1_Pin, SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2108      	movs	r1, #8
 80014fe:	4859      	ldr	r0, [pc, #356]	; (8001664 <scan_led+0x264>)
 8001500:	f000 fe2b 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW2_GPIO_Port, SW2_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2110      	movs	r1, #16
 8001508:	4856      	ldr	r0, [pc, #344]	; (8001664 <scan_led+0x264>)
 800150a:	f000 fe26 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW3_GPIO_Port, SW3_Pin, SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2120      	movs	r1, #32
 8001512:	4854      	ldr	r0, [pc, #336]	; (8001664 <scan_led+0x264>)
 8001514:	f000 fe21 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW4_GPIO_Port, SW4_Pin, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	4851      	ldr	r0, [pc, #324]	; (8001664 <scan_led+0x264>)
 800151e:	f000 fe1c 	bl	800215a <HAL_GPIO_WritePin>

			//if(mode == 1)
				display7segLed(led_buffer[1]);
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <scan_led+0x268>)
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fd9e 	bl	8001068 <display7segLed>

			if(flag[1] == 1){
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <scan_led+0x270>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 8089 	bne.w	8001648 <scan_led+0x248>
				key_sw = 3;
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <scan_led+0x260>)
 8001538:	2203      	movs	r2, #3
 800153a:	701a      	strb	r2, [r3, #0]
				setTimer(1, (int)(0.1*count_inter));
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <scan_led+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f871 	bl	8000628 <__aeabi_ui2d>
 8001546:	a344      	add	r3, pc, #272	; (adr r3, 8001658 <scan_led+0x258>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fe00 	bl	8000150 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff f8e0 	bl	800071c <__aeabi_d2iz>
 800155c:	4603      	mov	r3, r0
 800155e:	4619      	mov	r1, r3
 8001560:	2001      	movs	r0, #1
 8001562:	f000 f9f9 	bl	8001958 <setTimer>
			}
			break;
 8001566:	e06f      	b.n	8001648 <scan_led+0x248>
		case 3:
			HAL_GPIO_WritePin(SW1_GPIO_Port, SW1_Pin, SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	483d      	ldr	r0, [pc, #244]	; (8001664 <scan_led+0x264>)
 800156e:	f000 fdf4 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW2_GPIO_Port, SW2_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2110      	movs	r1, #16
 8001576:	483b      	ldr	r0, [pc, #236]	; (8001664 <scan_led+0x264>)
 8001578:	f000 fdef 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW3_GPIO_Port, SW3_Pin, RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2120      	movs	r1, #32
 8001580:	4838      	ldr	r0, [pc, #224]	; (8001664 <scan_led+0x264>)
 8001582:	f000 fdea 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW4_GPIO_Port, SW4_Pin, SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <scan_led+0x264>)
 800158c:	f000 fde5 	bl	800215a <HAL_GPIO_WritePin>

			//if(mode == 1)
				display7segLed(led_buffer[2]);
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <scan_led+0x268>)
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd67 	bl	8001068 <display7segLed>

			if(flag[1] == 1){
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <scan_led+0x270>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d154      	bne.n	800164c <scan_led+0x24c>
				key_sw = 4;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <scan_led+0x260>)
 80015a4:	2204      	movs	r2, #4
 80015a6:	701a      	strb	r2, [r3, #0]
				setTimer(1, (int)(0.1*count_inter));
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <scan_led+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f83b 	bl	8000628 <__aeabi_ui2d>
 80015b2:	a329      	add	r3, pc, #164	; (adr r3, 8001658 <scan_led+0x258>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe fdca 	bl	8000150 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff f8aa 	bl	800071c <__aeabi_d2iz>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	2001      	movs	r0, #1
 80015ce:	f000 f9c3 	bl	8001958 <setTimer>
			}
			break;
 80015d2:	e03b      	b.n	800164c <scan_led+0x24c>
		case 4:
			HAL_GPIO_WritePin(SW1_GPIO_Port, SW1_Pin, SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <scan_led+0x264>)
 80015da:	f000 fdbe 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW2_GPIO_Port, SW2_Pin, SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2110      	movs	r1, #16
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <scan_led+0x264>)
 80015e4:	f000 fdb9 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW3_GPIO_Port, SW3_Pin, SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2120      	movs	r1, #32
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <scan_led+0x264>)
 80015ee:	f000 fdb4 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SW4_GPIO_Port, SW4_Pin, RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	481b      	ldr	r0, [pc, #108]	; (8001664 <scan_led+0x264>)
 80015f8:	f000 fdaf 	bl	800215a <HAL_GPIO_WritePin>

			//if(mode == 1)
				display7segLed(led_buffer[3]);
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <scan_led+0x268>)
 80015fe:	78db      	ldrb	r3, [r3, #3]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd31 	bl	8001068 <display7segLed>

			if(flag[1] == 1){
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <scan_led+0x270>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d120      	bne.n	8001650 <scan_led+0x250>
				key_sw = 1;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <scan_led+0x260>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
				setTimer(1, (int)(0.1*count_inter));
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <scan_led+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f805 	bl	8000628 <__aeabi_ui2d>
 800161e:	a30e      	add	r3, pc, #56	; (adr r3, 8001658 <scan_led+0x258>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fd94 	bl	8000150 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff f874 	bl	800071c <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	2001      	movs	r0, #1
 800163a:	f000 f98d 	bl	8001958 <setTimer>
			}
			break;
 800163e:	e007      	b.n	8001650 <scan_led+0x250>
		default:
			break;
 8001640:	bf00      	nop
 8001642:	e006      	b.n	8001652 <scan_led+0x252>
			break;
 8001644:	bf00      	nop
 8001646:	e004      	b.n	8001652 <scan_led+0x252>
			break;
 8001648:	bf00      	nop
 800164a:	e002      	b.n	8001652 <scan_led+0x252>
			break;
 800164c:	bf00      	nop
 800164e:	e000      	b.n	8001652 <scan_led+0x252>
			break;
 8001650:	bf00      	nop
	}
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	9999999a 	.word	0x9999999a
 800165c:	3fb99999 	.word	0x3fb99999
 8001660:	2000005c 	.word	0x2000005c
 8001664:	40010c00 	.word	0x40010c00
 8001668:	20000064 	.word	0x20000064
 800166c:	20000058 	.word	0x20000058
 8001670:	20000078 	.word	0x20000078

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001678:	f000 fa6e 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167c:	f000 f866 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001680:	f000 f8f8 	bl	8001874 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001684:	f000 f89e 	bl	80017c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001688:	4828      	ldr	r0, [pc, #160]	; (800172c <main+0xb8>)
 800168a:	f001 f9c3 	bl	8002a14 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //dung PNP switch 7 seg led
  status[0] = INIT;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <main+0xbc>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
  status[1] = INIT;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <main+0xbc>)
 8001696:	2201      	movs	r2, #1
 8001698:	705a      	strb	r2, [r3, #1]

  count_inter = (8000000/(prescaller+1))/(counter_+1);
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <main+0xc0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <main+0xc4>)
 80016a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <main+0xc8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <main+0xcc>)
 80016b2:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//fsm_automatic_run();
	//display7segLed(led7_seg_buffer[led_buffer[2]]);
	scan_led();
 80016b4:	f7ff fea4 	bl	8001400 <scan_led>
	fsm_mode();
 80016b8:	f7ff fabc 	bl	8000c34 <fsm_mode>
	if(isButtonPressed(0)){
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff f8f1 	bl	80008a4 <isButtonPressed>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f5      	beq.n	80016b4 <main+0x40>
		setTimer(3, 100);
 80016c8:	2164      	movs	r1, #100	; 0x64
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 f944 	bl	8001958 <setTimer>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2120      	movs	r1, #32
 80016d4:	481b      	ldr	r0, [pc, #108]	; (8001744 <main+0xd0>)
 80016d6:	f000 fd40 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2120      	movs	r1, #32
 80016de:	4819      	ldr	r0, [pc, #100]	; (8001744 <main+0xd0>)
 80016e0:	f000 fd3b 	bl	800215a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2140      	movs	r1, #64	; 0x40
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <main+0xd0>)
 80016ea:	f000 fd36 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2108      	movs	r1, #8
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <main+0xd0>)
 80016f4:	f000 fd31 	bl	800215a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2120      	movs	r1, #32
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <main+0xd0>)
 80016fe:	f000 fd2c 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED_Pin, SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2120      	movs	r1, #32
 8001706:	480f      	ldr	r0, [pc, #60]	; (8001744 <main+0xd0>)
 8001708:	f000 fd27 	bl	800215a <HAL_GPIO_WritePin>
		if (mode < 4)
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <main+0xd4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d806      	bhi.n	8001722 <main+0xae>
			mode++;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <main+0xd4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <main+0xd4>)
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e7c8      	b.n	80016b4 <main+0x40>
		else
			mode = 1;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <main+0xd4>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
	scan_led();
 8001728:	e7c4      	b.n	80016b4 <main+0x40>
 800172a:	bf00      	nop
 800172c:	20000088 	.word	0x20000088
 8001730:	2000001c 	.word	0x2000001c
 8001734:	20000050 	.word	0x20000050
 8001738:	007a1200 	.word	0x007a1200
 800173c:	20000054 	.word	0x20000054
 8001740:	20000058 	.word	0x20000058
 8001744:	40010800 	.word	0x40010800
 8001748:	20000018 	.word	0x20000018

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	; 0x40
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	2228      	movs	r2, #40	; 0x28
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fd16 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001776:	2310      	movs	r3, #16
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd1a 	bl	80021bc <HAL_RCC_OscConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800178e:	f000 f8dd 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
 8001794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 ff86 	bl	80026bc <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017b6:	f000 f8c9 	bl	800194c <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3740      	adds	r7, #64	; 0x40
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <MX_TIM2_Init+0xa4>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <MX_TIM2_Init+0xa4>)
 80017ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <MX_TIM2_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <MX_TIM2_Init+0xa4>)
 80017f8:	2209      	movs	r2, #9
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_TIM2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <MX_TIM2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	4817      	ldr	r0, [pc, #92]	; (8001868 <MX_TIM2_Init+0xa4>)
 800180a:	f001 f8b3 	bl	8002974 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001814:	f000 f89a 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <MX_TIM2_Init+0xa4>)
 8001826:	f001 fa49 	bl	8002cbc <HAL_TIM_ConfigClockSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001830:	f000 f88c 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_TIM2_Init+0xa4>)
 8001842:	f001 fc15 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800184c:	f000 f87e 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  prescaller = htim2.Init.Prescaler;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <MX_TIM2_Init+0xa4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <MX_TIM2_Init+0xa8>)
 8001856:	6013      	str	r3, [r2, #0]
  counter_ = htim2.Init.Period;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <MX_TIM2_Init+0xa4>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <MX_TIM2_Init+0xac>)
 800185e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000088 	.word	0x20000088
 800186c:	20000050 	.word	0x20000050
 8001870:	20000054 	.word	0x20000054

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_GPIO_Init+0xb4>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <MX_GPIO_Init+0xb4>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <MX_GPIO_Init+0xb4>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_GPIO_Init+0xb4>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a20      	ldr	r2, [pc, #128]	; (8001928 <MX_GPIO_Init+0xb4>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <MX_GPIO_Init+0xb4>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, b_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 80018b8:	2200      	movs	r2, #0
 80018ba:	f649 71fe 	movw	r1, #40958	; 0x9ffe
 80018be:	481b      	ldr	r0, [pc, #108]	; (800192c <MX_GPIO_Init+0xb8>)
 80018c0:	f000 fc4b 	bl	800215a <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|c_Pin
                          |a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 80018c4:	2200      	movs	r2, #0
 80018c6:	21f8      	movs	r1, #248	; 0xf8
 80018c8:	4819      	ldr	r0, [pc, #100]	; (8001930 <MX_GPIO_Init+0xbc>)
 80018ca:	f000 fc46 	bl	800215a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : b_Pin LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin d_Pin
                           e_Pin f_Pin g_Pin c_Pin
                           a_Pin */
  GPIO_InitStruct.Pin = b_Pin|LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin
 80018ce:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 80018d2:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|c_Pin
                          |a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4619      	mov	r1, r3
 80018e6:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_GPIO_Init+0xb8>)
 80018e8:	f000 faa6 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80018ec:	2307      	movs	r3, #7
 80018ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <MX_GPIO_Init+0xbc>)
 8001900:	f000 fa9a 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           TEST_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001904:	23f8      	movs	r3, #248	; 0xf8
 8001906:	60bb      	str	r3, [r7, #8]
                          |TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2302      	movs	r3, #2
 8001912:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_GPIO_Init+0xbc>)
 800191c:	f000 fa8c 	bl	8001e38 <HAL_GPIO_Init>

}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00

08001934 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
		//button_reading();
		timerRun();
 800193c:	f000 f828 	bl	8001990 <timerRun>
		getKeyInput();
 8001940:	f7fe ff24 	bl	800078c <getKeyInput>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <setTimer>:
#include "global.h"

int counter[4] = {0}; //0:fsm_traffic_1, 1:scan_led, 2:fsm_traffic_2, 3:Toggle 2Hz
int flag[4] = {0};

void setTimer(int index ,int duration){
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	if(index < 4){
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b03      	cmp	r3, #3
 8001966:	dc09      	bgt.n	800197c <setTimer+0x24>
		counter[index] = duration;
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <setTimer+0x30>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		flag[index] = 0;
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <setTimer+0x34>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2100      	movs	r1, #0
 8001978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000068 	.word	0x20000068
 800198c:	20000078 	.word	0x20000078

08001990 <timerRun>:

void timerRun(void){
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
	for(int i =0; i<4; i++){
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e01c      	b.n	80019d6 <timerRun+0x46>
		if(counter[i] > 0){
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <timerRun+0x58>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd13      	ble.n	80019d0 <timerRun+0x40>
			counter[i]--;
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <timerRun+0x58>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <timerRun+0x58>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(counter[i] <= 0){
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <timerRun+0x58>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc04      	bgt.n	80019d0 <timerRun+0x40>
			flag[i] = 1;
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <timerRun+0x5c>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2101      	movs	r1, #1
 80019cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0; i<4; i++){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	dddf      	ble.n	800199c <timerRun+0xc>
			}
		}
	}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000068 	.word	0x20000068
 80019ec:	20000078 	.word	0x20000078

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_MspInit+0x5c>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_MspInit+0x5c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_MspInit+0x60>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_MspInit+0x60>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000

08001a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a64:	d113      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x44>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x44>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x44>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201c      	movs	r0, #28
 8001a84:	f000 f9a1 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a88:	201c      	movs	r0, #28
 8001a8a:	f000 f9ba 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 f87f 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM2_IRQHandler+0x10>)
 8001af2:	f000 ffdb 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000088 	.word	0x20000088

08001b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff fff8 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b12:	490c      	ldr	r1, [pc, #48]	; (8001b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b28:	4c09      	ldr	r4, [pc, #36]	; (8001b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f001 fb05 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3a:	f7ff fd9b 	bl	8001674 <main>
  bx lr
 8001b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001b48:	080031e0 	.word	0x080031e0
  ldr r2, =_sbss
 8001b4c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b50:	200000d4 	.word	0x200000d4

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x28>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x28>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f923 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff ff3c 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f903 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000024 	.word	0x20000024
 8001bdc:	2000002c 	.word	0x2000002c
 8001be0:	20000028 	.word	0x20000028

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	2000002c 	.word	0x2000002c
 8001c04:	200000d0 	.word	0x200000d0

08001c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_GetTick+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	200000d0 	.word	0x200000d0

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <__NVIC_EnableIRQ+0x34>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff90 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff2d 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff42 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff35 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b08b      	sub	sp, #44	; 0x2c
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e148      	b.n	80020de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8137 	bne.w	80020d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4aa3      	ldr	r2, [pc, #652]	; (80020fc <HAL_GPIO_Init+0x2c4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d05e      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e74:	4aa1      	ldr	r2, [pc, #644]	; (80020fc <HAL_GPIO_Init+0x2c4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d875      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e7a:	4aa1      	ldr	r2, [pc, #644]	; (8002100 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d058      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e80:	4a9f      	ldr	r2, [pc, #636]	; (8002100 <HAL_GPIO_Init+0x2c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d86f      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e86:	4a9f      	ldr	r2, [pc, #636]	; (8002104 <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d052      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e8c:	4a9d      	ldr	r2, [pc, #628]	; (8002104 <HAL_GPIO_Init+0x2cc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d869      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e92:	4a9d      	ldr	r2, [pc, #628]	; (8002108 <HAL_GPIO_Init+0x2d0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04c      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e98:	4a9b      	ldr	r2, [pc, #620]	; (8002108 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d863      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e9e:	4a9b      	ldr	r2, [pc, #620]	; (800210c <HAL_GPIO_Init+0x2d4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d046      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a99      	ldr	r2, [pc, #612]	; (800210c <HAL_GPIO_Init+0x2d4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d85d      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d82a      	bhi.n	8001f04 <HAL_GPIO_Init+0xcc>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d859      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_GPIO_Init+0x80>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	08001f1f 	.word	0x08001f1f
 8001ec4:	08001f61 	.word	0x08001f61
 8001ec8:	08001f67 	.word	0x08001f67
 8001ecc:	08001f67 	.word	0x08001f67
 8001ed0:	08001f67 	.word	0x08001f67
 8001ed4:	08001f67 	.word	0x08001f67
 8001ed8:	08001f67 	.word	0x08001f67
 8001edc:	08001f67 	.word	0x08001f67
 8001ee0:	08001f67 	.word	0x08001f67
 8001ee4:	08001f67 	.word	0x08001f67
 8001ee8:	08001f67 	.word	0x08001f67
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f67 	.word	0x08001f67
 8001ef4:	08001f67 	.word	0x08001f67
 8001ef8:	08001f67 	.word	0x08001f67
 8001efc:	08001f15 	.word	0x08001f15
 8001f00:	08001f29 	.word	0x08001f29
 8001f04:	4a82      	ldr	r2, [pc, #520]	; (8002110 <HAL_GPIO_Init+0x2d8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0a:	e02c      	b.n	8001f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e029      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e024      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	3308      	adds	r3, #8
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e01f      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e01a      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e013      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	611a      	str	r2, [r3, #16]
          break;
 8001f52:	e009      	b.n	8001f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	615a      	str	r2, [r3, #20]
          break;
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          break;
 8001f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	d801      	bhi.n	8001f72 <HAL_GPIO_Init+0x13a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_Init+0x13e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d802      	bhi.n	8001f84 <HAL_GPIO_Init+0x14c>
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x152>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	3b08      	subs	r3, #8
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	210f      	movs	r1, #15
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8090 	beq.w	80020d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2e4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1e0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2e8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_GPIO_Init+0x2ec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1d8>
 800200c:	2302      	movs	r3, #2
 800200e:	e004      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002010:	2303      	movs	r3, #3
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002018:	2300      	movs	r3, #0
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202a:	493b      	ldr	r1, [pc, #236]	; (8002118 <HAL_GPIO_Init+0x2e0>)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4933      	ldr	r1, [pc, #204]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	492d      	ldr	r1, [pc, #180]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4929      	ldr	r1, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002084:	4013      	ands	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4923      	ldr	r1, [pc, #140]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	491f      	ldr	r1, [pc, #124]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4919      	ldr	r1, [pc, #100]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4915      	ldr	r1, [pc, #84]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3301      	adds	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aeaf 	bne.w	8001e4c <HAL_GPIO_Init+0x14>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	372c      	adds	r7, #44	; 0x2c
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	807b      	strh	r3, [r7, #2]
 8002166:	4613      	mov	r3, r2
 8002168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216a:	787b      	ldrb	r3, [r7, #1]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002176:	e003      	b.n	8002180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	041a      	lsls	r2, r3, #16
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	400b      	ands	r3, r1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e26c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e246      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fcb6 	bl	8001c08 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fcb2 	bl	8001c08 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1fa      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fca2 	bl	8001c08 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fc9e 	bl	8001c08 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1e6      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1ba      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fc57 	bl	8001c08 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc53 	bl	8001c08 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e19b      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc36 	bl	8001c08 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc32 	bl	8001c08 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e17a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc16 	bl	8001c08 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc12 	bl	8001c08 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e15a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fa9a 	bl	8002938 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fbfc 	bl	8001c08 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fbf8 	bl	8001c08 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e140      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b97      	ldr	r3, [pc, #604]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b94      	ldr	r3, [pc, #592]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a93      	ldr	r2, [pc, #588]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fbb9 	bl	8001c08 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fbb5 	bl	8001c08 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0fd      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a7a      	ldr	r2, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a63      	ldr	r2, [pc, #396]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb69 	bl	8001c08 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb65 	bl	8001c08 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0ab      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb53 	bl	8001c08 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff fb4f 	bl	8001c08 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e095      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8081 	beq.w	80026a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb23 	bl	8001c08 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb1f 	bl	8001c08 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e067      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	492d      	ldr	r1, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	4927      	ldr	r1, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff faf3 	bl	8001c08 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff faef 	bl	8001c08 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e037      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e02f      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fadc 	bl	8001c08 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff fad8 	bl	8001c08 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e020      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42420060 	.word	0x42420060

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fa2c 	bl	8001c08 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff fa28 	bl	8001c08 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f98a 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	080031b4 	.word	0x080031b4
 8002888:	20000024 	.word	0x20000024
 800288c:	20000028 	.word	0x20000028

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb02 f203 	mul.w	r2, r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	080031c4 	.word	0x080031c4
 8002930:	080031d4 	.word	0x080031d4
 8002934:	003d0900 	.word	0x003d0900

08002938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <RCC_Delay+0x34>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <RCC_Delay+0x38>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002954:	bf00      	nop
  }
  while (Delay --);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <RCC_Delay+0x1c>
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20000024 	.word	0x20000024
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff f85a 	bl	8001a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fa6e 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e035      	b.n	8002a98 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x4e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a56:	d004      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x4e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d010      	beq.n	8002a96 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f9b4 	bl	8002e5c <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9a7 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f9b6 	bl	8002e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f98a 	bl	8002e5c <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f97d 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f98c 	bl	8002e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f960 	bl	8002e5c <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f953 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f962 	bl	8002e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f936 	bl	8002e5c <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f929 	bl	8002e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f938 	bl	8002e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fe82 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa6b 	bl	8003132 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8fc 	bl	8002e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa36 	bl	8003120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0b4      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x186>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d03e      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0xd4>
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	f200 8087 	bhi.w	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	f000 8086 	beq.w	8002e2e <HAL_TIM_ConfigClockSource+0x172>
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d87f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d01a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xa6>
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d87b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b60      	cmp	r3, #96	; 0x60
 8002d32:	d050      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d877      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b50      	cmp	r3, #80	; 0x50
 8002d3a:	d03c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d873      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d058      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d86f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b30      	cmp	r3, #48	; 0x30
 8002d4a:	d064      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d86b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d060      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d867      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05c      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d05a      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	e062      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f000 f95e 	bl	8003032 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
      break;
 8002d8e:	e04f      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f000 f947 	bl	8003032 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db2:	609a      	str	r2, [r3, #8]
      break;
 8002db4:	e03c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 f8be 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2150      	movs	r1, #80	; 0x50
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f915 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e02c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 f8dc 	bl	8002fa0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2160      	movs	r1, #96	; 0x60
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f905 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002df4:	e01c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f000 f89e 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f8f5 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002e14:	e00c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f000 f8ec 	bl	8002ffe <TIM_ITRx_SetConfig>
      break;
 8002e26:	e003      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
	...

08002e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <TIM_Base_SetConfig+0xa8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d007      	beq.n	8002ebc <TIM_Base_SetConfig+0x28>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d003      	beq.n	8002ebc <TIM_Base_SetConfig+0x28>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <TIM_Base_SetConfig+0xac>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <TIM_Base_SetConfig+0xa8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x52>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x52>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <TIM_Base_SetConfig+0xac>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <TIM_Base_SetConfig+0xa8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400

08002f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 030a 	bic.w	r3, r3, #10
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0210 	bic.w	r2, r3, #16
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	f043 0307 	orr.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003032:	b480      	push	{r7}
 8003034:	b087      	sub	sp, #28
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	431a      	orrs	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4313      	orrs	r3, r2
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003084:	2302      	movs	r3, #2
 8003086:	e041      	b.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a14      	ldr	r2, [pc, #80]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d004      	beq.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a10      	ldr	r2, [pc, #64]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10c      	bne.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40000400 	.word	0x40000400

08003120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2600      	movs	r6, #0
 8003148:	4d0c      	ldr	r5, [pc, #48]	; (800317c <__libc_init_array+0x38>)
 800314a:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	f000 f822 	bl	800319c <_init>
 8003158:	2600      	movs	r6, #0
 800315a:	4d0a      	ldr	r5, [pc, #40]	; (8003184 <__libc_init_array+0x40>)
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <__libc_init_array+0x44>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	080031d8 	.word	0x080031d8
 8003180:	080031d8 	.word	0x080031d8
 8003184:	080031d8 	.word	0x080031d8
 8003188:	080031dc 	.word	0x080031dc

0800318c <memset>:
 800318c:	4603      	mov	r3, r0
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
